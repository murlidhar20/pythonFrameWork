{"name": "test001_user_is_able_to_search_product_in_global_search", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <pageObject.loginPage.LoginPage object at 0x0E0E5C50>\n\n    @allure.step(\"user is able to logout\")\n    def log_out(self):\n        try:\n            self.BasePage = BasePage(self.driver)\n            self.screenShotPage = GetScreenShot(self.driver)\n            if self.BasePage.mouse_hover(self.header_signIn_xpath):\n>               if self.BasePage.element_click(self.btn_signOut_xpath):\n\npageObject\\loginPage.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <BasePage.BasePage.BasePage object at 0x01234130>, by_locator = ('xpath', \"//*[text()='Sign Out']\")\n\n    def element_click(self, by_locator):\n        try:\n>           WebDriverWait(self.driver, 120).until(ec.visibility_of_element_located(by_locator)).click()\n\nBasePage\\BasePage.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"f5e4034318ea2717f05531d25bac37eb\", element=\"3b17e7ba-2f70-41ca-8595-bf6345309148\")>\n\n    def click(self):\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n..\\..\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"f5e4034318ea2717f05531d25bac37eb\", element=\"3b17e7ba-2f70-41ca-8595-bf6345309148\")>\ncommand = 'clickElement'\nparams = {'id': '3b17e7ba-2f70-41ca-8595-bf6345309148', 'sessionId': 'f5e4034318ea2717f05531d25bac37eb'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\n..\\..\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f5e4034318ea2717f05531d25bac37eb\")>\ndriver_command = 'clickElement', params = {'id': '3b17e7ba-2f70-41ca-8595-bf6345309148'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x01234EB0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: cannot determine loading status\\...unk [0x77746739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77B28FEF+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x77B28FBD+1165]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nE       from unknown error: unexpected command response\nE         (Session info: chrome=103.0.5060.66)\n\n..\\..\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.smoke_test.Test0001 object at 0x0E09F810>\nsetUp = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f5e4034318ea2717f05531d25bac37eb\")>\n\n    @allure.description(\"verify user is able to search product in global search\")\n    @allure.epic(\"verify user is able to search product in global search\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.sanity\n    def test001_user_is_able_to_search_product_in_global_search(self, setUp):\n        self.logger.info(\" Start : verify user is able to search product in global search \")\n    \n        # page object creation\n        self.driver = setUp\n        self.login_page = LoginPage(self.driver)\n        self.base_page = BasePage(self.driver)\n        self.home_page = HomePage(self.driver)\n        self.customer = Customer(self.driver)\n        self.product_search = product_search_page(self.driver)\n    \n        # Test Data\n        self.customer = ExcelReader.read_data(self.path, \"Sheet1\", 2, 4)\n        product_name = \"mobile phone\"\n    \n        self.logger.info(\"Enter the Url\")\n        self.driver.get(self.baseUrl)\n    \n        self.logger.info(\"entered valid username and password\")\n        self.login_page.login_to_application(self.username, self.password)\n    \n        self.logger.info(\"fresh button is available\")\n        self.home_page.verify_fresh_button_is_displayed()\n    \n        self.logger.info(\"entered product \")\n        self.product_search.enter_the_product(product_name)\n    \n        self.logger.info(\"user is able to logout\")\n>       self.login_page.log_out()\n\ntestCase\\smoke_test.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pageObject.loginPage.LoginPage object at 0x0E0E5C50>\n\n    @allure.step(\"user is able to logout\")\n    def log_out(self):\n        try:\n            self.BasePage = BasePage(self.driver)\n            self.screenShotPage = GetScreenShot(self.driver)\n            if self.BasePage.mouse_hover(self.header_signIn_xpath):\n                if self.BasePage.element_click(self.btn_signOut_xpath):\n                    assert True\n                    self.screenShotPage.getScreenShot(\"user is able to logout\")\n                else:\n                    self.screenShotPage.getScreenShot(\"logout button is not displayed\")\n                    assert False\n            else:\n                self.screenShotPage.getScreenShot(\"sign in button is not displayed\")\n                assert False\n        except:\n            self.screenShotPage.getScreenShot(\"Exception occurred while the logout the application\")\n>           assert False\nE           AssertionError\n\npageObject\\loginPage.py:148: AssertionError"}, "description": "verify user is able to search product in global search", "steps": [{"name": "enter userName and password and click on login button", "status": "passed", "steps": [{"name": "Capture page title", "status": "passed", "start": 1657101919306, "stop": 1657101919307}, {"name": "Capture page title", "status": "passed", "start": 1657101919307, "stop": 1657101919323}], "attachments": [{"name": "user is navigated to Home page", "source": "04ddd264-dde6-4032-bd0d-ea229ae63773-attachment.png", "type": "image/png"}], "parameters": [{"name": "userName", "value": "'7406644604'"}, {"name": "password", "value": "'Infogain1234'"}], "start": 1657101871661, "stop": 1657101919909}, {"name": "verify fresh button is displayed", "status": "passed", "attachments": [{"name": "fresh button in home page is displayed", "source": "4bc64ed6-bb9c-4717-9c9e-e54be71faba8-attachment.png", "type": "image/png"}], "start": 1657101919909, "stop": 1657101920563}, {"name": "enter the product", "status": "passed", "attachments": [{"name": "result is getting displayed", "source": "d03bb48b-f36e-42da-944d-4455690afd79-attachment.png", "type": "image/png"}], "parameters": [{"name": "product", "value": "'mobile phone'"}], "start": 1657101920563, "stop": 1657101934964}, {"name": "user is able to logout", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"c:\\users\\hp\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\HP\\PycharmProjects\\pythonFrameWork\\pageObject\\loginPage.py\", line 148, in log_out\n    assert False\n"}, "attachments": [{"name": "Exception occurred while the logout the application", "source": "ee673a59-6c64-4cfc-be8b-32b71a253635-attachment.png", "type": "image/png"}], "start": 1657101934964, "stop": 1657101945451}], "attachments": [{"name": "log", "source": "54b3243c-2570-45b2-ba42-f4e233e4e384-attachment.txt", "type": "text/plain"}], "start": 1657101864842, "stop": 1657101945453, "uuid": "d5ed7760-4340-4399-9815-4bfbacae2279", "historyId": "fcaa4b07073d31a097cc2fcd82f22dfa", "testCaseId": "8bc9cb64c1b9f8e44ad66ac3d4bf81af", "fullName": "smoke_test.Test0001#test001_user_is_able_to_search_product_in_global_search", "labels": [{"name": "severity", "value": "normal"}, {"name": "epic", "value": "verify user is able to search product in global search"}, {"name": "tag", "value": "sanity"}, {"name": "suite", "value": "smoke_test"}, {"name": "subSuite", "value": "Test0001"}, {"name": "host", "value": "LAPTOP-T5HL6KR5"}, {"name": "thread", "value": "30872-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "smoke_test"}]}