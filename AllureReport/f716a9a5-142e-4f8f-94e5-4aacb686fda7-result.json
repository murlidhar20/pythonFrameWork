{"name": "test_VerifyExistingCustomer", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id", "trace": "self = <testCase.test_login.Test0001 object at 0x0D525C10>\nsetUp = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"670e6103eac305ce7037a60864da9872\")>\n\n    @allure.description(\"verify exiting customer record\")\n    @allure.epic(\"verify exiting customer record in epic\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_VerifyExistingCustomer(self, setUp):\n    \n        self.logger.info(\"*********** Start TC 001*********** \")\n        self.logger.info(\"*********** verify existing customer details *********** \")\n    \n        self.driver = setUp\n    \n        self.ip = LoginPage(self.driver)\n        self._basePage = BasePage(self.driver)\n        self._homePage = HomePage(self.driver)\n        self._customer = Customer(self.driver)\n    \n        self.customer = ExcelReader.read_data(self.path, \"Sheet1\", 2, 4)\n    \n        print(self.customer)\n    \n        self.logger.info(\"************* Enter the Url  ************\")\n        self.driver.get(self.baseUrl)\n    \n        self.ip.loginPage(self.username, self.password)\n        self.logger.info(\"entered valid username and password\")\n    \n        self._basePage.closeBrowser()\n    \n>       self._homePage.clickOnLeftPanel()\n\ntestCase\\test_login.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObject\\HomePage.py:24: in clickOnLeftPanel\n    self.BasePage.element_click(self.button_MainCustomer)\nBasePage\\BasePage.py:23: in element_click\n    WebDriverWait(self.driver, 30).until(ec.visibility_of_element_located(by_locator)).click()\n..\\..\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:71: in until\n    value = method(self._driver)\n..\\..\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:128: in __call__\n    return _element_if_visible(_find_element(driver, self.locator))\n..\\..\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:415: in _find_element\n    raise e\n..\\..\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:411: in _find_element\n    return driver.find_element(*by)\n..\\..\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:978: in find_element\n    'value': value})['value']\n..\\..\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0D536410>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"Backtrac...unk [0x75E56739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x771D8FEF+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x771D8FBD+1165]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\n\n..\\..\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: InvalidSessionIdException"}, "description": "verify exiting customer record", "steps": [{"name": "enter userName and password and click on login button", "status": "passed", "parameters": [{"name": "userName", "value": "'admin@yourstore.com'"}, {"name": "password", "value": "'admin'"}], "start": 1653911543558, "stop": 1653911550820}, {"name": "click on left panel ", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\n\n", "trace": "  File \"c:\\users\\hp\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\HP\\PycharmProjects\\pythonFrameWork\\pageObject\\HomePage.py\", line 24, in clickOnLeftPanel\n    self.BasePage.element_click(self.button_MainCustomer)\n  File \"C:\\Users\\HP\\PycharmProjects\\pythonFrameWork\\BasePage\\BasePage.py\", line 23, in element_click\n    WebDriverWait(self.driver, 30).until(ec.visibility_of_element_located(by_locator)).click()\n  File \"c:\\users\\hp\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 71, in until\n    value = method(self._driver)\n  File \"c:\\users\\hp\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 128, in __call__\n    return _element_if_visible(_find_element(driver, self.locator))\n  File \"c:\\users\\hp\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 415, in _find_element\n    raise e\n  File \"c:\\users\\hp\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 411, in _find_element\n    return driver.find_element(*by)\n  File \"c:\\users\\hp\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 978, in find_element\n    'value': value})['value']\n  File \"c:\\users\\hp\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"c:\\users\\hp\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1653911550865, "stop": 1653911551871}], "attachments": [{"name": "log", "source": "54b7034f-7216-4369-8316-328cfd6f7d94-attachment.txt", "type": "text/plain"}], "start": 1653911539909, "stop": 1653911551893, "uuid": "8123e3cc-6fe4-4208-a890-6c0d23580c8a", "historyId": "7a080e7e3f02b060a166e55b5ed17c6b", "testCaseId": "c1ee2737e7e399ad1b8ac347c5871d91", "fullName": "test_login.Test0001#test_VerifyExistingCustomer", "labels": [{"name": "epic", "value": "verify exiting customer record in epic"}, {"name": "severity", "value": "normal"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "Test0001"}, {"name": "host", "value": "LAPTOP-T5HL6KR5"}, {"name": "thread", "value": "1444-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login"}]}